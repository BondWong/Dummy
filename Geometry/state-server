#!/usr/bin/env python3
import sys
import json
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import parse_qs
import socket
from cache import StateCache

class StateRequestHandler(BaseHTTPRequestHandler):
    def do_POST(self):
    	# parse paramters
        parameters = self.parse() 

        # parameter validation
        if parameters == None or len(parameters) == 0:
            self.bad_request()
            return
        if 'latitude' not in parameters or 'longitude' not in parameters:
            self.bad_request()
            return

        # visit cache to get result
        stateCache = StateCache()
        state = stateCache.get(parameters['longitude'], parameters['latitude'])
        result = json.dumps([state])

        # write response
        self.send_header('content-type', 'application/json')
        self.send_response(200)
        self.end_headers()
        self.wfile.write(bytes(result, 'utf-8'))

    def parse(self):
        length = int(self.headers['content-length'])
        parameters = parse_qs(self.rfile.read(length), keep_blank_values=1)
        result = {}
        for k in parameters.keys():
            key = k.decode('utf-8')
            value = parameters[k][0].decode('utf-8')
            result[key] = value
        return result 

    def bad_request(self):
        self.send_error(400, 'lack of parameters longitude and latitude')
        self.end_headers()

if __name__ == "__main__":
    host = '' # localhost
    port = 8080

    http_server = HTTPServer((host, port), StateRequestHandler)
    try:
        http_server.serve_forever()
    except KeyboardInterrupt:
        pass

    http_server.server_close()
